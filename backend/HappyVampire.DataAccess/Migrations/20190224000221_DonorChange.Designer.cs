// <auto-generated />
using System;
using HappyVampire.DataAccess.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HappyVampire.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190224000221_DonorChange")]
    partial class DonorChange
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("DonorId");

                    b.Property<int?>("HospitalId");

                    b.HasKey("Id");

                    b.HasIndex("DonorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Donor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodType");

                    b.Property<string>("FullName");

                    b.Property<int>("Rating");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Coordinates");

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BloodType");

                    b.Property<string>("Diagnosis");

                    b.Property<string>("FullName");

                    b.Property<int?>("HospitalId");

                    b.Property<string>("MotivationLetter");

                    b.Property<string>("Photo");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<bool>("IsDonor");

                    b.Property<string>("Uid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Donation", b =>
                {
                    b.HasOne("HappyVampire.DataAccess.Entities.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId");

                    b.HasOne("HappyVampire.DataAccess.Entities.Hospital", "Hospital")
                        .WithMany("Donations")
                        .HasForeignKey("HospitalId");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Donor", b =>
                {
                    b.HasOne("HappyVampire.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Hospital", b =>
                {
                    b.HasOne("HappyVampire.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HappyVampire.DataAccess.Entities.Patient", b =>
                {
                    b.HasOne("HappyVampire.DataAccess.Entities.Hospital", "Hospital")
                        .WithMany("Patients")
                        .HasForeignKey("HospitalId");
                });
#pragma warning restore 612, 618
        }
    }
}
